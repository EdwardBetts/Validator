var search_data = {"index":{"searchIndex":["selfcontainedvalidator","validation","invalidkey","invalidrule","rule","email","length","matches","notempty","numeric","rules","validator","add_object_to_rule()","add_parameterized_rule()","camelize()","error_key()","error_key()","error_key()","error_key()","error_key()","errors()","new()","new()","new()","params()","params()","params()","params()","params()","rule()","rules()","valid?()","valid_value?()","valid_value?()","valid_value?()","valid_value?()","valid_value?()"],"longSearchIndex":["selfcontainedvalidator","validation","validation::invalidkey","validation::invalidrule","validation::rule","validation::rule::email","validation::rule::length","validation::rule::matches","validation::rule::notempty","validation::rule::numeric","validation::rules","validation::validator","validation::rules#add_object_to_rule()","validation::rules#add_parameterized_rule()","validation::rules#camelize()","validation::rule::email#error_key()","validation::rule::length#error_key()","validation::rule::matches#error_key()","validation::rule::notempty#error_key()","validation::rule::numeric#error_key()","validation::rules#errors()","validation::rule::length::new()","validation::rule::matches::new()","validation::validator::new()","validation::rule::email#params()","validation::rule::length#params()","validation::rule::matches#params()","validation::rule::notempty#params()","validation::rule::numeric#params()","validation::rules#rule()","validation::rules#rules()","validation::rules#valid?()","validation::rule::email#valid_value?()","validation::rule::length#valid_value?()","validation::rule::matches#valid_value?()","validation::rule::notempty#valid_value?()","validation::rule::numeric#valid_value?()"],"info":[["SelfContainedValidator","","SelfContainedValidator.html","",""],["Validation","","Validation.html","",""],["Validation::InvalidKey","","Validation/InvalidKey.html","","<p>InvalidKey is raised if a rule is added to a field that doesn’t exist\n"],["Validation::InvalidRule","","Validation/InvalidRule.html","","<p>InvalidRule is raised if a rule is added that doesn’t exist\n"],["Validation::Rule","","Validation/Rule.html","",""],["Validation::Rule::Email","","Validation/Rule/Email.html","","<p>Email rule class. This rule was adapted from\ngithub.com/emmanuel/aequitas/blob/master/lib/aequitas/rule/format/email_address.rb\n…\n"],["Validation::Rule::Length","","Validation/Rule/Length.html","","<p>Length rule\n"],["Validation::Rule::Matches","","Validation/Rule/Matches.html","","<p>Matches rule\n"],["Validation::Rule::NotEmpty","","Validation/Rule/NotEmpty.html","","<p>Rule for not empty\n"],["Validation::Rule::Numeric","","Validation/Rule/Numeric.html","","<p>rule for numeric values\n"],["Validation::Rules","","Validation/Rules.html","",""],["Validation::Validator","","Validation/Validator.html","","<p>Validator is a simple ruby validation class. You don’t use it directly\ninside your classes like just …\n"],["add_object_to_rule","Validation::Rules","Validation/Rules.html#method-i-add_object_to_rule","(rule)","<p>Adds this validation object to a rule if it can accept it\n"],["add_parameterized_rule","Validation::Rules","Validation/Rules.html#method-i-add_parameterized_rule","(field, rule)","<p>Adds a parameterized rule to this object\n"],["camelize","Validation::Rules","Validation/Rules.html#method-i-camelize","(term)","<p>Converts a symbol to a class name, taken from rails\n"],["error_key","Validation::Rule::Email","Validation/Rule/Email.html#method-i-error_key","()","<p>The error key for this rule\n"],["error_key","Validation::Rule::Length","Validation/Rule/Length.html#method-i-error_key","()",""],["error_key","Validation::Rule::Matches","Validation/Rule/Matches.html#method-i-error_key","()","<p>The error key for this rule\n"],["error_key","Validation::Rule::NotEmpty","Validation/Rule/NotEmpty.html#method-i-error_key","()","<p>The error key for this field\n"],["error_key","Validation::Rule::Numeric","Validation/Rule/Numeric.html#method-i-error_key","()","<p>The error key for this rule\n"],["errors","Validation::Rules","Validation/Rules.html#method-i-errors","()","<p>A hash of errors for this object\n"],["new","Validation::Rule::Length","Validation/Rule/Length.html#method-c-new","(params)","<p>params can be any of the following:\n\n<pre>- :minimum - at least this many chars\n- :maximum - at most this many ...</pre>\n"],["new","Validation::Rule::Matches","Validation/Rule/Matches.html#method-c-new","(matcher_field)","<p>This class should take the field to match with in the constructor:\n<p>rule = Validation::Rule::Matches(:password) …\n"],["new","Validation::Validator","Validation/Validator.html#method-c-new","(obj)",""],["params","Validation::Rule::Email","Validation/Rule/Email.html#method-i-params","()","<p>This rule has no params\n"],["params","Validation::Rule::Length","Validation/Rule/Length.html#method-i-params","()","<p>returns the params given in the constructor\n"],["params","Validation::Rule::Matches","Validation/Rule/Matches.html#method-i-params","()","<p>Params is the matcher_field given in the constructor\n"],["params","Validation::Rule::NotEmpty","Validation/Rule/NotEmpty.html#method-i-params","()","<p>This rule has no params\n"],["params","Validation::Rule::Numeric","Validation/Rule/Numeric.html#method-i-params","()","<p>this rule has no params\n"],["rule","Validation::Rules","Validation/Rules.html#method-i-rule","(field, rule)","<p>Define a rule for this object\n<p>The rule parameter can be one of the following:\n<p>a symbol that matches to …\n"],["rules","Validation::Rules","Validation/Rules.html#method-i-rules","()","<p>A hash of rules for this object\n"],["valid?","Validation::Rules","Validation/Rules.html#method-i-valid-3F","()","<p>Determines if this object is valid. When a rule fails for a field, this\nwill stop processing further …\n"],["valid_value?","Validation::Rule::Email","Validation/Rule/Email.html#method-i-valid_value-3F","(value)","<p>Determines if value is a valid email\n"],["valid_value?","Validation::Rule::Length","Validation/Rule/Length.html#method-i-valid_value-3F","(value)","<p>determines if value is valid according to the constructor params\n"],["valid_value?","Validation::Rule::Matches","Validation/Rule/Matches.html#method-i-valid_value-3F","(value)","<p>Determines if value matches the field given in the constructor\n"],["valid_value?","Validation::Rule::NotEmpty","Validation/Rule/NotEmpty.html#method-i-valid_value-3F","(value)","<p>Determines if value is empty or not. In this rule, nil is empty\n"],["valid_value?","Validation::Rule::Numeric","Validation/Rule/Numeric.html#method-i-valid_value-3F","(value)","<p>Determines if value is numeric. It can only contain whole numbers\n"]]}}